package com.example.Storage.storage;

import com.example.Storage.LoadBalancerConfiguration;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import org.springframework.cloud.loadbalancer.annotation.LoadBalancerClient;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@FeignClient(name = "storage")
@LoadBalancerClient(name = "storage",
        configuration= LoadBalancerConfiguration.class)
public interface StorageControllerInterface {
    @GetMapping
    @Transactional(timeout = 500)
    @CircuitBreaker(name = "circuitBreaker1", fallbackMethod = "fallback1")
    List<Book> getStorage();

    @PostMapping()
    @Transactional(timeout = 500)
    @CircuitBreaker(name = "circuitBreaker2", fallbackMethod = "fallback2")
    void addBook(@RequestBody Book book);

    @DeleteMapping("{bookId}")
    @Transactional(timeout = 500)
    @CircuitBreaker(name = "circuitBreaker3", fallbackMethod = "fallback3")
    void deleteBook(@PathVariable("bookId") Long bookId);

    @PatchMapping("{bookId}")
    @Transactional(timeout = 500)
    @CircuitBreaker(name = "circuitBreaker4", fallbackMethod = "fallback4")
    void changePrice(
            @PathVariable("bookId") Long bookId,
            @RequestParam(required = false) int price);
}
