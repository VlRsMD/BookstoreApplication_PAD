package com.example.Orders.orders;

import com.example.Orders.LoadBalancerConfiguration;
import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import org.springframework.cloud.loadbalancer.annotation.LoadBalancerClient;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@FeignClient(name = "orders")
@LoadBalancerClient(name = "orders",
        configuration= LoadBalancerConfiguration.class)
public interface OrdersControllerInterface {
    @GetMapping
    @Transactional(timeout = 500)
    @CircuitBreaker(name = "circuitBreaker1", fallbackMethod = "fallback1")
    List<Orders> getOrders();

    @PostMapping()
    @Transactional(timeout = 500)
    @CircuitBreaker(name = "circuitBreaker2", fallbackMethod = "fallback2")
    void addOrder(@RequestBody Orders order);

    @DeleteMapping("{orderId}")
    @Transactional(timeout = 500)
    @CircuitBreaker(name = "circuitBreaker3", fallbackMethod = "fallback3")
    void deleteOrder(@PathVariable("orderId") Long orderId);

    @PatchMapping("{orderId}")
    @Transactional(timeout = 500)
    @CircuitBreaker(name = "circuitBreaker4", fallbackMethod = "fallback4")
    void changeAddress(
            @PathVariable("orderId") Long orderId,
            @RequestParam(required = false) String address);
}
